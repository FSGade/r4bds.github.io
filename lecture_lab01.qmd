---
title: "Lecture Lab 1"
author: "Leon Eyrich Jessen"
format:
  revealjs:
    embed-resources: true
    theme: moon
    slide-number: c/t
    width: 1600
    height: 900
    mainfont: avenir
    logo: images/r4bds_logo_small.png
    footer: "R for Bio Data Science"
---

# Course Introduction

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## DATADATADATA: Data Hoarding

![](images/data_hoarding.png){fig-align="center" width=80%}



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Increasing the Value of Data Requires Activation!

![](images/increasing_the_value_of_data.png){fig-align="center" width=80%}



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Data Driven Decision Making

_Because we've always done it this way!_

:::: {.columns}

::: {.column width="40%"}

Your job as a Bio Data Scientist:

 - Activate data
 - Extract insights
 - Communicate to non-data stakeholders
 - Facilitate data driven decision making

:::

::: {.column width="60%"}

![](images/data_driven_decision_making.jpg){fig-align="center" width=80%}

:::

::::

_Levering data driven decision making allows the company to gain a competitive edge and this is where you Bio Data Science skills are indispensable!_



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## You value as a Bio Data Scientist / Bioinformatician

:::: {.columns}

::: {.column width="50%"}

- In your career, your task will be to create value

- This is regardless of whether you plan to work in indstry or pursue a research career

- What you do has to create value

- Creating value requires skills

- Skills need to be learned

- So, why are you here?

:::

::: {.column width="50%"}

![](images/question_mark.png){fig-align="center" width=100%}

:::

::::


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
# You're here to gain skills, which will allow you to generate value!



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## R for Bio Data Science - What is it?

![](images/bio_data_science.png){fig-align="center" width=80%}

- In essence: The art of converting numbers to value
  - Ingest data
  - Transform, wrangle, visualise, model
  - Output insights



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## R for Bio Data Science - Intrinsically interdisciplinary

![](images/r_for_bio_data_science_hex_logo_quadratic.png){fig-align="center" width=100%}



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Why "Bio" in R for Bio Data Science?

![](images/domain_knowledge.png){fig-align="center" width=80%}



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## What is the motivation for this Course?

![](images/data_tutorial_vs_reality.jpg){fig-align="center" width=80%}



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## What is the motivation for this Course?

![](images/code_now_only_god.png){fig-align="center" width=70%}



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## What will you learn?

- The craft of going from raw extracted data to insights
- Advanced data visualisation
- Collaborative project oriented coding
- All with an emphasis on reproducibility and communication

![](images/data_science_cycle.png){fig-align="center" width=80%}



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
# R



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Introducing R: A Journey into Bio Data Science

:::: {.columns}

::: {.column width="40%"}

- Open-source programming language
- Essential tool for statistics & data visualization
- Widely used in bioinformatics and data science
- Dynamic community & vast library of packages

:::

::: {.column width="60%"}

![](images/R_logo.png){fig-align="center" width=80%}

:::

::::

_"To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call." â€“ John Chambers (creator of the S language, of which R is an implementation)._



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## The Roots and Rise of R

:::: {.columns}

::: {.column width="40%"}

- Originated from the 'S' language at Bell Laboratories in the 1970s
- S was proprietary, so basically R is an open source implementation of S and was officially released in 1995
- This similar to Linux vs. Unix
- A leader in statistical computing. Powers many academic research & industry projects
- E.g. Crucial in genomics, where R aids in decoding biological data
- R comes with a very large and well proven built in tools for data analysis

:::

::: {.column width="60%"}

![](images/R_logo.png){fig-align="center" width=80%}

:::

::::



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## A Few Examples of Functional Programming

:::: {.columns}

::: {.column width="50%"}

You can approach `R` as

- an object-oriented programming language

:::

::: {.column width="50%"}

Let's say we have this vector

```{r}
#| echo: true
my_vector <- c(49, 31, 24, 35, 71, 7, 36, 23, 67, 37)
```

Now, we want to compute the mean, we can do:

Object Oriented Approach:

```{r}
#| echo: true
Vector <- R6::R6Class("Vector",
  public = list(
    data = NULL,
    initialize = function(data) {
      if (!is.numeric(data)) {
        stop("Data should be numeric.")
      }
      self$data <- data
    },
    mean = function() {
      return(sum(self$data) / length(self$data))
    }
  )
)
numbers <- Vector$new(my_vector)
print(numbers$mean())
```


:::

::::



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## A Few Examples of Functional Programming

:::: {.columns}

::: {.column width="50%"}

You can approach `R` as

- an object-oriented programming language
- a imperative programming language

:::

::: {.column width="50%"}

Let's say we have this vector

```{r}
#| echo: true
my_vector <- c(49, 31, 24, 35, 71, 7, 36, 23, 67, 37)
```

Now, we want to compute the mean, we can do:

Imperative Approach:

```{r}
#| echo: true
my_sum <- 0
for( i in 1:length(my_vector) ){
  my_sum <- my_sum + my_vector[i]
}
my_mean <- my_sum / length(my_vector)
print(my_mean)
```

:::

::::



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## A Few Examples of Functional Programming

:::: {.columns}

::: {.column width="50%"}

You can approach `R` as

- an object-oriented programming language
- a imperative programming language
- a functional programming language

The code on the right all performs the same task, but which do you think is:

- simpler to read and understand?
- faster to execute?

In this course we will work with `R` in its native form - a fully fledged functional programming language

:::

::: {.column width="50%"}

Let's say we have this vector

```{r}
#| echo: true
my_vector <- c(49, 31, 24, 35, 71, 7, 36, 23, 67, 37)
```

Now, we want to compute the mean, we can do:

Functional approach:

```{r}
#| echo: true
my_mean <- mean(my_vector)
print(my_mean)
```

:::

::::

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## You simply call functions on objects

Standard Deviation

```{r}
#| echo: true
sd(my_vector)
```

Median

```{r}
#| echo: true
median(my_vector)
```

Permute

```{r}
#| echo: true
sample(my_vector)
```

Bootstrap

```{r}
#| echo: true
sample(my_vector, replace = TRUE)
```

...and tons more!

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## "R is not a real programming language": Debunking Myths I

1. `R` is Turing-complete:
    - `R` can theoretically solve any computational problem. Foundational concept shared with e.g. Python, C++, Java, etc.

2. R is fully capable in Production:
    - E.g. shiny apps used in industry and `R` comes with an ecosystem supporting reproducibility in production settings.

3. Comprehensive Ecosystem:
    - CRAN contains ~20,000 packages. Also Bioconductor is a gold standard for bioinformatics software.

4. Interoperability:
    - Seamless integration with other languages (C, C++, Fortran, and Python) using packages like Rcpp and reticulate.



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## "R is not a real programming language": Debunking Myths II

5. Advanced Programming Features:
    - Supports object-oriented, functional, and imperative programming paradigms. Flexible metaprogramming with capabilities like non-standard evaluation

6. R's Active & Growing Community:
    - Annual global R conferences and numerous local user groups and also: `tidyverse`

7. Performance:
    - `R` is interpreted and can be slower, packages like data.table and Rcpp offer dramatic performance enhancements. Also, parallel computing is straightforward

8. Not Just for Statisticians:
    - R's applications range from web development to machine learning (tidymodels, caret, mlr3) to reporting (Quarto, bookdown)

_Closing Thought: Every tool has its strengths. The key is to understand and leverage them effectively._



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
# Tidyverse



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Tidyverse

:::: {.columns}

::: {.column width="50%"}

- With SO many packages, there will inevitable be SO many opinions

- The tidyverse is a unified opinionated collection of R packages designed for data science

- All packages share an underlying design philosophy, grammar, and data structures

- Today R has in essense become two dialects `base` and `tidyverse`

- Note: This course will focus solely on the `tidyverse` dialect

:::

::: {.column width="50%"}

![](images/tidyverse_packages_hex_logos.png){fig-align="center" width=80%}

:::

::::

_We'll spend a lot more time on going over the details of the Tidyverse!_

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Intermezzo: A brief course History


:::: {.columns}

::: {.column width="40%"}

- From ~20 to ~150 students

- This year materials have been revised to suit large class room teaching

- The teaching team will do out best to support your learning, but it is important to emphasise, that you will have to take responsibility for following the course curriculum!

:::

::: {.column width="60%"}
```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: center
#| fig-width: 10
#| fig-height: 8
library("tidyverse")
library("broom")
d <- tibble(
  Year = c(2018, 2020, 2021, 2022, 2023, 2024),
  Students = c(8, 38, 89, 91, 144, 130)
)

d |> 
  ggplot(aes(x = Year,
             y = Students)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, colour = "red", linetype = "dashed") +
  scale_x_continuous(breaks = 2018:2024) +
  theme_classic(base_size = 20) +
  theme(panel.grid.major = element_line())
```
:::

::::



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## General Course Outline

Tuesdays 08.00 - 12.00

- 08.00 - 08.30 Recap of key points from last weeks exercises
- 08.30 - 08.45 Introduction to theme of the day
- 08.45 - 09.00 Break
- 09.00 - 12.00 Exercises



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## About

### Course Description
- Basically, what can you expect to learn and what do I expect that you learn: [DTU Course Base](https://kurser.dtu.dk/course/22100)

### Course Resources

- Text Book: ["R for Data Science 2e"](https://r4ds.hadley.nz) by Hadley Wickham, Mine Ã‡etinkaya-Rundel, and Garrett Grolemund
- Course site: [https://r4bds.github.io](https://r4bds.github.io)

### Course format

- Active Learning: _Very strong emphasis on students working in groups_, rather than me talking
- The focus is on you working actively, _not_ me talking
- I will _not_ go through all preparation materials in class
- Proper preparation is a prerequisite for completing lab exercises and maximising course yield
- I focus on supporting your independence, hence for some exercises you will have to seek out information (_I'm not a good data scientist, I'm just slightly better at googling than others_)



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Exercise feedback

### Weekly
- An exercise question will be highlighted 
- Each group is responsible for crafting an answer to this highlighted question
- These answers will be hand-ins
- The following week, we will choose a random answer to be discussed in plenum
- Note: This starts from lab 2


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Group Formation

- Modern Bio Data Science is a team sport!
- You have to form a group of 4-5 students with a Shared Bio Data Science / Bioinformatics Area of Interest
- You will work in these groups throughout the course
- You will do the final project in these groups
- You will attend the exam in these groups
- Group work is a _very important_ meta skill for an engineer!
- Please fill in groups, see schedule for lab 1
- If you do not have a group, fill in your id and interest at an available group and someone might join you
- I aim to let you decide on the groups, I will of course be happy to help if needed



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## How to succeed in this course

- Prepare materials as instructed!
- Show up for class!
- Do the exercises!
- Do the project work!

_Basically, show up, follow the curriculum and you will do fine!_



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
# Questions?
