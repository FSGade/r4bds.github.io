---
title: "Recap Lab 5"
author: "Leon Eyrich Jessen"
format:
  revealjs:
    embed-resources: true
    theme: moon
    slide-number: c/t
    width: 1600
    height: 900
    mainfont: avenir
    logo: images/r4bds_logo_small.png
    footer: "R for Bio Data Science"
---



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
# A Few Meta Points...

```{r}
#| echo: false
#| eval: true
#| message: false


library("tidyverse")
SPE_ENV <- read_tsv(file = "data/SPE_ENV.tsv")
targets <- c("Methanobacteria", "Clostridia", "Actinobacteria",
             "Sphingobacteria", "Anaerolineae")
SPE_ENV_targets <- filter(SPE_ENV, Taxa %in% targets)
```

## Load Libraries
```{r}
#| echo: true
#| eval: true
#| message: false


library("tidyverse")
library("fs")
```

*Remember to load libraries first! You cannot use tools from a toolbox you have not yet "picked up"*

## Load Data

- Create the data directory programmatically
```{r}
#| echo: true
#| eval: false


dir_create(path = "data")
```

- Retrieve the data directly
```{r}
#| echo: true
#| eval: false


diabetes_data <- read_csv(file = "https://hbiostat.org/data/repo/diabetes.csv")
```

- Write the data to disk
```{r}
#| echo: true
#| eval: false


write_csv(x = diabetes_data,
          file = "data/diabetes.csv")
```

- Read the data back in
```{r}
#| echo: true
#| eval: true


diabetes_data <- read_csv(file = "data/diabetes.csv")
```

- Remember to set the `eval=FALSE` flag in the chunk settings to avoid retrieving the data every time you hit `render`

## Look at data

```{r}
#| echo: true
#| eval: true


diabetes_data
```

Note the column types are stated, i.e. what kind of data is in each column

- `<chr>`: character
- `<dbl>`: double

## `mutate()`

- Change the height, weight, waist and hip from inches/pounds to the metric system (cm/kg), rounding to 1 decimal

```{r}
#| echo: true
#| eval: true
diabetes_data <- diabetes_data |>
  mutate(height_cm = round(height * 2.54,
                           digits = 1),
         weight_kg = round(weight * 0.454,
                           digits = 1),
         hip_cm = round(hip * 2.54,
                        digits = 1),
         waist_cm = round(waist * 2.54,
                          digits = 1))
diabetes_data |> 
  select(matches("height|weight|hip|waist")) # Note: Selecting using a regex()
```

## `mutate()` OR

```{r}
#| echo: true
#| eval: true

inch_to_cm_fct <- 2.54
my_digits <- 1
diabetes_data <- diabetes_data |>
  mutate(height_cm = round(height * inch_to_cm_fct,
                           digits = my_digits),
         weight_kg = round(weight * 0.454,
                           digits = my_digits),
         hip_cm = round(hip * inch_to_cm_fct,
                        digits = my_digits),
         waist_cm = round(waist * inch_to_cm_fct,
                          digits = my_digits))
diabetes_data |> 
  select(matches("height|weight|hip|waist")) # Note: Selecting using a regex()
```

*Now, if we wanted 2 decimals, we only have to change one variable!* 👍

## `filter()`

- How many men in Buckingham are younger than 30 and taller than 1.9m?

```{r}
#| echo: true
#| eval: true
diabetes_data |>
  filter(location == "Buckingham",
         age < 30,
         height_cm > 190)
```

*Note, that `,` is equivalent to `&`*

## `filter()`

- Make a scatter plot of weight versus height and colour by gender for inhabitants of Louisa above the age of 40

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: true
#| eval: true
#| message: false
#| warning: false
pl <- diabetes_data |>
  filter(location == "Louisa",
         age > 40) |> 
  ggplot(aes(x = height_cm,
             y = weight_kg,
             colour = gender)) +
  geom_point() +
  theme_minimal(base_size = 26)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
pl
```
:::

::::

## `filter()` OR

- Make a scatter plot of weight versus height and colour by gender for inhabitants of Louisa above the age of 40

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: true
#| eval: true
#| message: false
#| warning: false
pl <- diabetes_data |>
  filter(location == "Louisa",
         age > 40) |> 
  ggplot(aes(x = height_cm,
             y = weight_kg,
             colour = gender)) +
  geom_point(size = 5,
             alpha = 0.5) +
  geom_smooth(method = "lm") +
  scale_colour_manual(
    values = c("salmon", "cornflowerblue")) +
  theme_minimal(base_size = 26)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
pl
```
:::

::::


## `filter()`

- Make a scatter plot of weight versus height and colour by gender for inhabitants of Louisa above the age of 40

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: true
#| eval: true
#| message: false
#| warning: false
pl <- diabetes_data |>
  mutate(
    subject = case_when(
      location == "Louisa" & age > 40 ~ gender,
      TRUE ~ "Not incl")) |>
  ggplot(aes(x = height_cm,
             y = weight_kg,
             colour = subject,
             size = subject)) +
  geom_point(alpha = 0.5) +
  scale_size_manual(values = c(5, 5, 1)) +
  theme_minimal(base_size = 26) +
  theme(legend.position = "bottom")
```

- *Note how we're creating needed attribute **before** plotting*

- *Always modify data **Before** plotting!*

:::

::: {.column width="60%"}
```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
pl
```
:::

::::

## `arrange()`

:::: {.columns}

::: {.column width="50%"}
- How old is the youngest person
```{r}
#| echo: true
#| eval: true
diabetes_data |>
  arrange(age) |>
  slice(1) |> 
  select(age)
```
:::

::: {.column width="50%"}
- How old is the oldest person
```{r}
#| echo: true
#| eval: true
diabetes_data |>
  arrange(desc(age)) |>
  slice(1) |> 
  select(age)
```
:::

::::

## `arrange()` OR

:::: {.columns}

::: {.column width="50%"}
- How old is the youngest person
```{r}
#| echo: true
#| eval: true
diabetes_data |>
  filter(age == min(age)) |> 
  select(age)
```
:::

::: {.column width="50%"}
- How old is the oldest person
```{r}
#| echo: true
#| eval: true
diabetes_data |>
  filter(age == max(age)) |> 
  select(age)
```
:::

::::

## `arrange()` OR

:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
diabetes_data |>
  summarise(min_age = min(age),
            max_age = max(age))
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
diabetes_data |>
  group_by(location) |> 
  summarise(min_age = min(age),
            max_age = max(age))
```
:::

::::

*OR, OR, OR, OR, OR, OR, OR, etc.*

## `mutate()`

- Create a new variable, where you calculate the BMI

```{r}
#| echo: true
#| eval: true
diabetes_data <- diabetes_data |> 
  mutate(BMI = weight_kg / (height_cm / 100)^2)
diabetes_data |> 
  select(BMI)
```

## `case_when()`

- Create a BMI_class variable

```{r}
#| echo: true
#| eval: true
diabetes_data <- diabetes_data |> 
  mutate(BMI_class = case_when(BMI < 16.5 ~ "Severely underweight",
                               16.5 <= BMI & BMI < 18.5 ~ "Underweight",
                               18.5 <= BMI & BMI < 25.0 ~ "Normal weight",
                               25.0 <= BMI & BMI < 30.0 ~ "Overweight",
                               30.0 <= BMI & BMI < 35.0 ~ "Obesity class I",
                               35.0 <= BMI & BMI < 40.0 ~ "Obesity class II",
                               40.0 <= BMI ~ "Obesity class III"))
diabetes_data |> 
  select(BMI, BMI_class)
```


## Factor levels

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: true
#| eval: true
#| message: false
#| warning: false
pl <- diabetes_data |>
  count(BMI_class) |>
  drop_na(BMI_class) |> 
  mutate(pct = n / sum(n) * 100) |>
  ggplot(aes(x = BMI_class,
             y = pct)) +
  geom_col() +
  geom_hline(yintercept = 0) +
  theme_minimal(base_size = 26) +
  theme(axis.text.x = element_text(
    angle = 45,
    hjust = 1)) +
  labs(x = "",
       y = "Percent")
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
pl
```
:::

::::

- Columns order is nonsensical, we know there is an order

## Factor levels

```{r}
#| echo: true
#| eval: true
diabetes_data <- diabetes_data |>
  mutate(BMI_class = factor(BMI_class,
                            levels =  c("Severely underweight", "Underweight",
                                        "Normal weight", "Overweight",
                                        "Obesity class I", "Obesity class II",
                                        "Obesity class III")))
```

## Factor levels

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: true
#| eval: true
#| message: false
#| warning: false
pl <- diabetes_data |>
  count(BMI_class) |>
  drop_na(BMI_class) |> 
  mutate(pct = n / sum(n) * 100) |>
  ggplot(aes(x = BMI_class,
             y = pct)) +
  geom_col() +
  geom_hline(yintercept = 0) +
  theme_minimal(base_size = 26) +
  theme(axis.text.x = element_text(
    angle = 45,
    hjust = 1)) +
  labs(x = "",
       y = "Percent")
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
pl
```
:::

::::

- Columns order is now sensical, following known order!

## Factor levels

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: true
#| eval: true
#| message: false
#| warning: false
pl <- diabetes_data |>
  count(BMI_class) |>
  drop_na(BMI_class) |> 
  mutate(pct = n / sum(n) * 100) |>
  ggplot(aes(x = BMI_class,
             y = pct)) +
  geom_col(colour = "green",
           fill = "lightgreen",
           alpha = 0.5) +
  geom_hline(yintercept = 0) +
  theme_minimal(base_size = 26) +
  theme(axis.text.x = element_text(
    angle = 45,
    hjust = 1)) +
  labs(x = "",
       y = "Percent") +
  theme(plot.margin = unit(
    c(1, 0.5, 0.5, 1), "cm"),
    panel.grid.major.x = element_blank())
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 7
pl
```
:::

::::

- Columns order is now sensical, following known order!


## `group_by() |> summarise()`

- For each BMI_class group, calculate the average weight and associated standard deviation

```{r}
#| echo: true
#| eval: true
diabetes_data |> 
  group_by(BMI_class) |> 
  summarise(n = n(),
            mu_weight_kg = mean(weight_kg),
            sigma_weight_kg = sd(weight_kg))
```

- `<fct>` = a factor variable, i.e. a category!

```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
write_tsv(x = diabetes_data,
          file = "data/diabetes_data_augmented.tsv")
```

# Assignment

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
library("tidyverse")
library("patchwork")
diabetes_data <- read_tsv(file = "data/diabetes_data_augmented.tsv")
```

## Data augmentation

- Create a BFP (Body fat percentage) variable
- Create a WHR (waist-to-hip ratio) variable

```{r}
#| echo: true
#| eval: true
diabetes_data <- diabetes_data |> 
  mutate(gender_class = case_when(gender == "female" ~ 0,
                                  gender == "male" ~ 1),
         BFP = 1.39 * BMI + 0.16 * age - 10.34 * gender_class - 9,
         WHR = waist / hip)
diabetes_data
```

## Which correlate better with BMI, WHR or BFP?

First look at the data

:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| fig-align: center
pl1 <- diabetes_data |> 
  ggplot(aes(x = BMI,
             y = WHR)) +
  geom_point() +
  theme_minimal(base_size = 26)
pl1
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| fig-align: center
pl2 <- diabetes_data |> 
  ggplot(aes(x = BMI,
             y = BFP)) +
  geom_point() +
  theme_minimal(base_size = 26)
pl2
```
:::

::::

*Well, there does seem to be a tendency...*

## Which correlate better with BMI, WHR or BFP?

:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
diabetes_data |>
  select(BMI, WHR, BFP) |>
  pivot_longer(cols = c(WHR, BFP),
               names_to = "metric",
               values_to = "value")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
corrs <- diabetes_data |>
  select(BMI, WHR, BFP) |>
  pivot_longer(cols = c(WHR, BFP),
               names_to = "metric",
               values_to = "value") |>
  drop_na() |>
  group_by(metric) |>
  summarise(PCC = cor(x = BMI,
                      y = value,
                      use = "complete.obs",
                      method = "pearson"))
corrs
```
:::

::::


## Which correlate better with BMI, WHR or BFP?

```{r}
#| echo: true
#| eval: true
pl1 <- pl1 +
  labs(subtitle = str_c("PCC = ", corrs |> filter(metric == "WHR") |> pull(PCC) |> round(3)))
pl2 <- pl2 +
  labs(subtitle = str_c("PCC = ", corrs |> filter(metric == "BFP") |> pull(PCC) |> round(3)))
pl1 + pl2
```

## A Better Way?

```{r}
#| echo: true
#| eval: true
corrs <- corrs |> 
  mutate(R2 = round(PCC^2, digits = 3),
         label = str_c("R2 = ", R2))
corrs
```

## Which correlate better with BMI, WHR or BFP?

:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
s1 <- corrs |>
  filter(metric == "WHR") |>
  pull(label)

s2 <- corrs |>
  filter(metric == "BFP") |>
  pull(label)

pl1 <- pl1 +
  labs(subtitle = s1) +
  geom_smooth(method = "lm") +
  theme_minimal()

pl2 <- pl2 +
  labs(subtitle = s2) +
  geom_smooth(method = "lm") +
  theme_minimal()
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
pl1 / pl2
```

:::

::::

_NB! "Tim Toady" (TIMTOWTDI) and - As much as possible, prepare your data to contain what you need before plotting!_

# Lastly, why does BFP evidently correlate much better with BMI than WHR?
